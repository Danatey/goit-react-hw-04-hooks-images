{"version":3,"sources":["Components/API/API.js","Components/Modal/Modal.jsx","Components/Searchbar/Searchbar.jsx","Components/Loader/Loader.jsx","Components/ImageGalleryItem/ImageGalleryItem.jsx","Components/ImageGallery/ImageGallery.jsx","Components/Button/Button.jsx","App.js","index.js"],"names":["BASE_URL","KEY","getAPI","search","currPage","url","axios","get","modalRoot","document","querySelector","Modal","onCloseModal","children","useEffect","window","addEventListener","handleKeyDown","removeEventListener","event","code","createPortal","className","onClick","currentTarget","target","Searchbar","onSearch","useState","setSearch","reset","onSubmit","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","LoaderComp","variant","disabled","color","height","width","timeout","ImageGalleryItem","images","map","id","webformatURL","largeImageURL","src","alt","ImageGallery","Button","App","setImages","setCurrPage","showModal","setShowModal","bigImageUrl","setBigImageUrl","imageStatus","setImageStatus","isLoading","setIsLoading","then","response","filteredData","data","hits","hit","prevState","finally","scrollTo","top","documentElement","scrollHeight","behavior","toggleModal","showButton","length","Loader","onLoad","query","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6aa2b059.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nconst BASE_URL = \"https://pixabay.com/api\";\r\nconst KEY = \"21923762-625ed23d6fd96f8b8b3fcd755\";\r\n\r\nconst getAPI = (search, currPage = 1) => {\r\n  const url = `${BASE_URL}/?q=${search}&page=${currPage}&key=${KEY}&image_type=photo&orientation=horizontal&per_page=12`;\r\n  return axios.get(url);\r\n};\r\n\r\nexport default getAPI;\r\n","import { useEffect } from 'react'\r\nimport { createPortal } from 'react-dom';\r\nimport PropTypes from 'prop-types'; \r\n \r\nconst modalRoot = document.querySelector('#modal-root');\r\n\r\nconst Modal = ({onCloseModal, children}) => {\r\n\r\n  useEffect(() => {\r\n    window.addEventListener('keydown', handleKeyDown);\r\n    return () => { window.removeEventListener('keydown', handleKeyDown); }\r\n  })\r\n\r\n  const handleKeyDown = event => {\r\n    if (event.code === 'Escape') {\r\n      onCloseModal();\r\n    }\r\n  };\r\n\r\n  const onBackdropClick = event => {\r\n    if (event.currentTarget === event.target) {\r\n      onCloseModal();\r\n    }\r\n  };\r\n\r\n  return createPortal(\r\n      <div className=\"Overlay\" onClick={onBackdropClick}>\r\n        <div className=\"Modal\">{children}</div>\r\n      </div>,\r\n      modalRoot,\r\n    );\r\n}\r\n\r\nModal.propTypes = {\r\n  onCloseModal: PropTypes.func,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Modal;\r\n\r\n// class Modal extends Component {\r\n//   componentDidMount() {\r\n//     window.addEventListener('keydown', this.handleKeyDown);\r\n//   }\r\n\r\n//   componentWillUnmount() {\r\n//     window.removeEventListener('keydown', this.handleKeyDown);\r\n//   }\r\n\r\n//   handleKeyDown = event => {\r\n//     if (event.code === 'Escape') {\r\n//       this.props.onClose();\r\n//     }\r\n//   };\r\n\r\n//   onBackdropClick = event => {\r\n//     if (event.currentTarget === event.target) {\r\n//       this.props.onClose();\r\n//     }\r\n//   };\r\n\r\n//   render() {\r\n//     return createPortal(\r\n//       <div className=\"Overlay\" onClick={this.onBackdropClick}>\r\n//         <div className=\"Modal\">{this.props.children}</div>\r\n//       </div>,\r\n//       modalRoot,\r\n//     );\r\n//   }\r\n// }\r\n\r\n","import PropTypes from 'prop-types'; \r\n\r\nimport { useState } from 'react'\r\n\r\nconst Searchbar = ({onSearch}) => {\r\n    const [search, setSearch] = useState('');\r\n\r\n    const handleChange = event => {\r\n        setSearch(event.currentTarget.value)\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        // Проп который передается форме для вызова при сабмите\r\n        onSearch(search);\r\n        reset();\r\n    };\r\n\r\n    const reset = () => {\r\n        setSearch('')\r\n    }\r\n    \r\n    return <header className=\"Searchbar\">\r\n         <form className=\"SearchForm\" onSubmit = {handleSubmit}>\r\n             <button type=\"submit\" className=\"SearchForm-button\">\r\n                <span className=\"SearchForm-button-label\">Search</span>\r\n             </button>\r\n\r\n             <input\r\n            className=\"SearchForm-input\"\r\n            type=\"text\"\r\n            autoComplete=\"off\"\r\n            autoFocus\r\n            placeholder=\"Search images and photos\"\r\n            value={search}\r\n            onChange={handleChange}\r\n            />\r\n        </form>\r\n    </header>\r\n}\r\n\r\nSearchbar.propTypes = {\r\n    onSubmit: PropTypes.func,\r\n}\r\n\r\nexport default Searchbar\r\n\r\n// class OldSearchbar extends Component {\r\n//     static propTypes = {\r\n//         search: PropTypes.string\r\n//     }\r\n//     state = {\r\n//         search: '',\r\n//     }\r\n\r\n//     handleChange = event => {\r\n//     this.setState({ search: event.currentTarget.value });\r\n//   };\r\n\r\n//     handleSubmit = event => {\r\n//         event.preventDefault();\r\n//         console.log(`Signed up as: ${this.state.search}`);\r\n\r\n//         // Проп который передается форме для вызова при сабмите\r\n//         this.props.onSubmit(this.state.search);\r\n//         this.reset();\r\n//     };\r\n\r\n//     reset = () => {\r\n//         this.setState({ search: '', });\r\n//     }\r\n\r\n//     render() {\r\n//         const { search } = this.state;\r\n\r\n//         return <header className=\"Searchbar\">\r\n//          <form className=\"SearchForm\" onSubmit = {this.handleSubmit}>\r\n//              <button type=\"submit\" className=\"SearchForm-button\">\r\n//                 <span className=\"SearchForm-button-label\">Search</span>\r\n//              </button>\r\n\r\n//              <input\r\n//             className=\"SearchForm-input\"\r\n//             type=\"text\"\r\n//             autoComplete=\"off\"\r\n//             autoFocus\r\n//             placeholder=\"Search images and photos\"\r\n//             value={search}\r\n//             onChange={this.handleChange}\r\n//             />\r\n//         </form>\r\n//     </header>\r\n//     }\r\n// }\r\n\r\n\r\n\r\n","import Loader from \"react-loader-spinner\";\r\n\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nconst LoaderComp = () => (\r\n  <button className=\"Loader\" variant=\"primary\" disabled>\r\n    <Loader\r\n        type=\"Puff\"\r\n        color=\"#00BFFF\"\r\n        height={100}\r\n        width={100}\r\n        timeout={3000} //3 secs\r\n      />\r\n  </button>\r\n);\r\n\r\nexport default LoaderComp;","const ImageGalleryItem = ({ images, onClick }) => {\r\n    return <>\r\n    {images.map(({ id, webformatURL, largeImageURL }) => {\r\n      return (\r\n        <li key={id} className=\"ImageGalleryItem\">\r\n          <img\r\n            onClick={() => onClick(largeImageURL)}\r\n            src={webformatURL}\r\n            alt=\"\"\r\n            className=\"ImageGalleryItem-image\"\r\n          />\r\n        </li>\r\n      );\r\n    })}\r\n  </>\r\n}\r\n\r\nexport default ImageGalleryItem","import PropTypes from 'prop-types';\r\n\r\nimport ImageGalleryItem from \"../ImageGalleryItem\";\r\n\r\nconst ImageGallery = ({images, onClick}) => {\r\n    return <ul className=\"ImageGallery\">\r\n        <ImageGalleryItem images={images} onClick={onClick}/>\r\n    </ul>\r\n}\r\n\r\nImageGallery.propTypes = {\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default ImageGallery","import PropTypes from 'prop-types';\r\n\r\nconst Button = ({ onClick }) => (\r\n  <button type=\"button\" className=\"Button\" onClick={onClick}>\r\n    Load more\r\n  </button>\r\n);\r\n\r\nButton.propTypes = {\r\n  onClick: PropTypes.func,\r\n};\r\n\r\nexport default Button;","import { useState, useEffect } from \"react\";\n\nimport getAPI from \"./Components/API/API\";\nimport Modal from \"./Components/Modal\";\nimport Searchbar from \"./Components/Searchbar\";\nimport Loader from \"./Components/Loader\";\nimport ImageGallery from \"./Components/ImageGallery/ImageGallery\";\nimport Button from \"./Components/Button\";\n\nconst App = () => {\n  const [images, setImages] = useState([]);\n  const [currPage, setCurrPage] = useState(1);\n  const [search, setSearch] = useState(\"\");\n  const [showModal, setShowModal] = useState(false);\n  const [bigImageUrl, setBigImageUrl] = useState(\"\");\n  const [imageStatus, setImageStatus] = useState(\"loading\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (search === \"\") {\n      return;\n    }\n    getAPI(search, currPage)\n      .then((response) => {\n        const filteredData = response.data.hits.map((hit) => {\n          return {\n            id: hit.id,\n            webformatURL: hit.webformatURL,\n            largeImageURL: hit.largeImageURL,\n          };\n        });\n\n        setImages((prevState) => [...prevState, ...filteredData]);\n      })\n      .finally(() => {\n        if (currPage > 2) {\n          window.scrollTo({\n            top: document.documentElement.scrollHeight,\n            behavior: \"smooth\",\n          });\n        }\n        return setIsLoading(false);\n      });\n  }, [currPage, search]);\n\n  const onSearchHandle = (query) => {\n    setSearch(query);\n    setCurrPage(1);\n    setImages([]);\n  };\n\n  const getLoading = () => {\n    setIsLoading(true);\n    setCurrPage((prevState) => prevState + 1);\n  };\n\n  const onImageClick = (url) => {\n    setBigImageUrl(url);\n    toggleModal();\n    setImageStatus(\"loading\");\n  };\n\n  const toggleModal = () => {\n    return setShowModal(!showModal);\n  };\n\n  const onImageLoaded = () => {\n    return setImageStatus(\"loaded\");\n  };\n\n  const showButton = images.length > 0 && !isLoading;\n\n  return (\n    <>\n      {showModal && (\n        <Modal onCloseModal={toggleModal}>\n          {imageStatus === \"loading\" && <Loader />}\n          <img src={bigImageUrl} alt=\"\" onLoad={onImageLoaded} />\n        </Modal>\n      )}\n\n      <Searchbar onSearch={onSearchHandle} />\n      <ImageGallery images={images} onClick={onImageClick} />\n      {showButton && (\n        <div className=\"container\">\n          <Button onClick={getLoading} isLoading={isLoading} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n\n// class OldApp extends Component {\n//   state = {\n//     images: [],\n//     currPage: 1,\n//     search: \"\",\n//     showModal: false,\n//     bigImageUrl: \"\",\n//     imageStatus: \"loading\",\n//     isLoading: 'false',\n//   };\n\n//   onSearchHandle = (query) => {\n//     this.setState({\n//       search: query,\n//       currentPage: 1,\n//       images: [],\n//     });\n//   };\n\n// fetchImages = () => {\n//   const { currPage, search } = this.state;\n\n//   this.setState({ isLoading: true });\n\n//   getAPI(search, currPage)\n//     .then((response) => {\n//       const filteredData = response.data.hits.map((hit) => {\n//         return {\n//           id: hit.id,\n//           webformatURL: hit.webformatURL,\n//           largeImageURL: hit.largeImageURL,\n//         };\n//       });\n\n//       this.setState((prevState) => ({\n//         images: [...prevState.images, ...filteredData],\n//         currPage: prevState.currPage + 1,\n//       }));\n//     })\n//     .finally(() => {\n//       if (this.state.currPage > 2) {\n//         window.scrollTo({\n//           top: document.documentElement.scrollHeight,\n//           behavior: \"smooth\",\n//         });\n//       }\n//       return this.setState({ isLoading: false });\n//     });\n// };\n\n//   onImageClick = (url) => {\n//     this.setState({ bigImageUrl: url });\n//     this.toggleModal();\n//     this.setState({ imageStatus: \"loading\" });\n//   };\n\n//   toggleModal = () => {\n//     this.setState(({ showModal }) => ({\n//       showModal: !showModal,\n//     }));\n//   };\n\n//   onImageLoaded = () => {\n//     this.setState({ imageStatus: \"loaded\" });\n//   };\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.search !== this.state.search) {\n//       this.fetchImages();\n//     }\n//   }\n\n//   render() {\n//     const { images, showModal, isLoading, bigImageUrl, imageStatus } =\n//       this.state;\n\n//     const showButton = images.length > 0 && !isLoading;\n\n//     return (\n//       <>\n//         {showModal && (\n//           <Modal onClose={this.toggleModal}>\n//             {imageStatus === \"loading\" && <Loader />}\n//             <img src={bigImageUrl} alt=\"\" onLoad={this.onImageLoaded} />\n//           </Modal>\n//         )}\n\n//         <Searchbar onSubmit={this.onSearchHandle} />\n//         <ImageGallery images={images} onClick={this.onImageClick} />\n//         {showButton && (\n//           <div className=\"container\">\n//             <Button onClick={this.fetchImages} isLoading={isLoading} />\n//           </div>\n//         )}\n//       </>\n//     );\n//   }\n// }\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\nimport \"./styles.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}